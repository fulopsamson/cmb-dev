<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_tsigh_cmb_u_cmdb_ci_cmb_service</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_tsigh_cmb_u_cmdb_ci_cmb_service">u_last_billing_dateVALCHANGES^u_state=Terminated^NQu_stateCHANGESTOTerminated^EQ<item endquery="false" field="u_last_billing_date" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item display_value="Terminated" endquery="false" field="u_state" goto="false" newquery="false" operator="=" or="false" value="Terminated"/>
            <item display_value="Terminated" endquery="false" field="u_state" goto="false" newquery="true" operator="CHANGESTO" or="false" value="Terminated"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>CMB Service Last billing date change</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
	gs.info('LBD: script run');
	gs.info('LBD: Current lbd: ' + current.u_last_billing_date + ' Previous lbd: ' + previous.u_last_billing_date + ' Current state: ' + current.u_state + ' Previous state: ' + previous.u_state);
    var curr = new GlideDateTime(current.u_last_billing_date);
    var prev = new GlideDateTime(previous.u_last_billing_date);
    if (curr == '') {
        gs.info('LBD: Service last billing date is invalid');
        return;
    }

    if (curr == prev && current.u_state == previous.u_state) {
		gs.info('LBD: quit because values were equal');
        return;
    }

    var acd = new GlideDateTime(current.u_acceptance_date);
    var dummy = new GlideDateTime();
    dummy.setDayOfMonthUTC(1);
    var now_start = new GlideDateTime(dummy.getDate());
    dummy.setDayOfMonthUTC(31);
    var now_end = new GlideDateTime(dummy.getDate());

    var utils = new x_tsigh_cmb.CMBServiceUtils();
    var validationLine = new GlideRecord('x_tsigh_cmb_validation_line');

    var current_end = new GlideDateTime();
    var current_start = new GlideDateTime();
    var pointer = new GlideDateTime();
    var rev = utils.getRevenueSum(current.sys_id);
    gs.info('LBD: Current period: ' + now_start.getDate() + ' - ' + now_end.getDate());

    if (previous.u_state == 'Active') {
        if (curr <= now_end) {
            gs.info('LBD: prev = null  && curr < now_end');
            pointer = new GlideDateTime(curr);
            pointer.setDayOfMonthUTC(1);

            while (pointer < now_end) {
                current_start = new GlideDateTime(pointer);
                pointer.setDayOfMonthUTC(31);
                current_end = new GlideDateTime(pointer);
                if (acd <= current_end && acd >= current_start) {
                    current_start = new GlideDateTime(acd);
                }
                validationLine.initialize();
                validationLine.setValue('period_start', current_start.getDate());
                validationLine.setValue('period_end', current_end.getDate());
                validationLine.setValue("billing_profile", current.u_billing_profile);
                validationLine.setValue("service", current.sys_id);
                validationLine.setValue("year", current_start.getYearUTC());
                validationLine.setValue("month", current_start.getMonthUTC());
                validationLine.setValue('otc', rev.otc);
                validationLine.setValue('mrc', rev.mrc);
				if (acd <= current_end && acd >= current_start) {
                    validationLine.setValue('otc_calculated', (-1) * rev.otc);
                } else {
					validationLine.setValue('otc_calculated', 0);
				}
                validationLine.setValue('mrc_calculated', (-1) * utils.claculateMRC(rev.mrc, current_start, current_end));
				validationLine.setValue('project', current.u_project);
				validationLine.setValue('project_code', current.u_project_code);
				validationLine.setValue('product_type', current.u_product_type);
                validationLine.insert();
                gs.info(current_start.getDate() + ' - ' + current_end.getDate());
                pointer.addDaysUTC(1);
            }
            dummy = new GlideDateTime(curr);
            dummy.setDayOfMonthUTC(1);
            current_start = new GlideDateTime(dummy);
            current_end = new GlideDateTime(curr);
            if (acd <= current_end && acd >= current_start) {
                current_start = new GlideDateTime(acd);
            }

            validationLine.initialize();
            validationLine.setValue('period_start', current_start.getDate());
            validationLine.setValue('period_end', current_end.getDate());
            validationLine.setValue("billing_profile", current.u_billing_profile);
            validationLine.setValue("service", current.sys_id);
            validationLine.setValue("year", current_start.getYearUTC());
            validationLine.setValue("month", current_start.getMonthUTC());
            validationLine.setValue('otc', rev.otc);
            validationLine.setValue('mrc', rev.mrc);
			if (acd <= current_end && acd >= current_start) {
                validationLine.setValue('otc_calculated', rev.otc);
            } else {
				validationLine.setValue('otc_calculated', 0);
			}
            validationLine.setValue('mrc_calculated', parseFloat(current.u_early_termination_fee) + utils.claculateMRC(rev.mrc, current_start, current_end));
			validationLine.setValue('project', current.u_project);
			validationLine.setValue('project_code', current.u_project_code);
			validationLine.setValue('product_type', current.u_product_type);
            validationLine.insert();
			gs.info(current_start.getDate() + ' - ' + current_end.getDate());

        } else {
            gs.info('LBD: prev = null  && curr >= now_end');
            pointer = new GlideDateTime(now_end);
            pointer.addDaysUTC(1);

            while (pointer < curr) {
                current_start = new GlideDateTime(pointer);
                pointer.setDayOfMonthUTC(31);
                current_end = new GlideDateTime(pointer);
                if (current_end > curr) {
                    current_end = new GlideDateTime(curr);
                }
                validationLine.initialize();
                validationLine.setValue('period_start', current_start.getDate());
                validationLine.setValue('period_end', current_end.getDate());
                validationLine.setValue("billing_profile", current.u_billing_profile);
                validationLine.setValue("service", current.sys_id);
                validationLine.setValue("year", current_start.getYearUTC());
                validationLine.setValue("month", current_start.getMonthUTC());
                validationLine.setValue('otc', rev.otc);
                validationLine.setValue('mrc', rev.mrc);
                validationLine.setValue('otc_calculated', 0);
                if (curr == current_end) {
                    validationLine.setValue('mrc_calculated', parseFloat(current.u_early_termination_fee) + utils.claculateMRC(rev.mrc, current_start, current_end));
                } else {
                    validationLine.setValue('mrc_calculated', utils.claculateMRC(rev.mrc, current_start, current_end));
                }
				validationLine.setValue('project', current.u_project);
				validationLine.setValue('project_code', current.u_project_code);
				validationLine.setValue('product_type', current.u_product_type);
                validationLine.insert();
				gs.info(current_start.getDate() + ' - ' + current_end.getDate());
				pointer.addDaysUTC(1);
            }
        }
    } else {
        if (curr < prev) {
            gs.info('LBD: curr < prev');
            pointer = new GlideDateTime(curr);
			pointer.setDayOfMonthUTC(1);
            while (pointer < prev) {
                current_start = new GlideDateTime(pointer);
                pointer.setDayOfMonthUTC(31);
				if (pointer > prev) {
					pointer = new GlideDateTime(prev);
				}
                current_end = new GlideDateTime(pointer);
                if (acd <= current_end && acd >= current_start) {
                    current_start = new GlideDateTime(acd);
                }
                validationLine.initialize();
                validationLine.setValue('period_start', current_start.getDate());
                validationLine.setValue('period_end', current_end.getDate());
                validationLine.setValue("billing_profile", current.u_billing_profile);
                validationLine.setValue("service", current.sys_id);
                validationLine.setValue("year", current_start.getYearUTC());
                validationLine.setValue("month", current_start.getMonthUTC());
                validationLine.setValue('otc', rev.otc);
                validationLine.setValue('mrc', rev.mrc);
                if (acd <= current_end && acd >= current_start) {
					validationLine.setValue('otc_calculated', (-1) * rev.otc);
				} else {
					validationLine.setValue('otc_calculated', 0);
				}
                if (prev == current_end) {
                    validationLine.setValue('mrc_calculated', (-1) * parseFloat(current.u_early_termination_fee) - utils.claculateMRC(rev.mrc, current_start, current_end));
                } else {
                    validationLine.setValue('mrc_calculated', (-1) * utils.claculateMRC(rev.mrc, current_start, current_end));
                }
				validationLine.setValue('project', current.u_project);
				validationLine.setValue('project_code', current.u_project_code);
				validationLine.setValue('product_type', current.u_product_type);
                validationLine.insert();
                gs.info(current_start.getDate() + ' - ' + current_end.getDate());
                pointer.addDaysUTC(1);
            }
            dummy = new GlideDateTime(curr);
            dummy.setDayOfMonthUTC(1);
            current_start = new GlideDateTime(dummy);
            current_end = new GlideDateTime(curr);
            if (acd <= current_end && acd >= current_start) {
                current_start = new GlideDateTime(acd);
            }

            validationLine.initialize();
            validationLine.setValue('period_start', current_start.getDate());
            validationLine.setValue('period_end', current_end.getDate());
            validationLine.setValue("billing_profile", current.u_billing_profile);
            validationLine.setValue("service", current.sys_id);
            validationLine.setValue("year", current_start.getYearUTC());
            validationLine.setValue("month", current_start.getMonthUTC());
            validationLine.setValue('otc', rev.otc);
            validationLine.setValue('mrc', rev.mrc);
			if (acd <= current_end && acd >= current_start) {
                validationLine.setValue('otc_calculated', rev.otc);
            } else {
				validationLine.setValue('otc_calculated', 0);
			}
            validationLine.setValue('mrc_calculated', parseFloat(current.u_early_termination_fee) + utils.claculateMRC(rev.mrc, current_start, current_end));
			validationLine.setValue('project', current.u_project);
			validationLine.setValue('project_code', current.u_project_code);
			validationLine.setValue('product_type', current.u_product_type);
            validationLine.insert();
			gs.info(current_start.getDate() + ' - ' + current_end.getDate());

        } else if (curr > prev) {
            gs.info('LBD: curr > prev');

            dummy = new GlideDateTime(prev);
            dummy.setDayOfMonthUTC(1);
            current_start = new GlideDateTime(dummy);
            current_end = new GlideDateTime(prev);
            if (acd <= current_end && acd >= current_start) {
                current_start = new GlideDateTime(acd);
            }

            validationLine.initialize();
            validationLine.setValue('period_start', current_start.getDate());
            validationLine.setValue('period_end', current_end.getDate());
            validationLine.setValue("billing_profile", current.u_billing_profile);
            validationLine.setValue("service", current.sys_id);
            validationLine.setValue("year", current_start.getYearUTC());
            validationLine.setValue("month", current_start.getMonthUTC());
            validationLine.setValue('otc', rev.otc);
            validationLine.setValue('mrc', rev.mrc);
			if (acd <= current_end && acd >= current_start) {
                 validationLine.setValue('otc_calculated', (-1) * rev.otc);
            } else {
				validationLine.setValue('otc_calculated', 0);
			}
			validationLine.setValue('project', current.u_project);
			validationLine.setValue('project_code', current.u_project_code);
			validationLine.setValue('product_type', current.u_product_type);
            validationLine.setValue('mrc_calculated', (-1) * parseFloat(current.u_early_termination_fee) - utils.claculateMRC(rev.mrc, current_start, current_end));
            validationLine.insert();
			gs.info(current_start.getDate() + ' - ' + current_end.getDate());
			
			pointer = new GlideDateTime(prev);
			pointer.setDayOfMonthUTC(1);
			if (acd <= current_end && acd >= current_start) {
                pointer = new GlideDateTime(acd);
            }

            while (pointer < curr) {
                current_start = new GlideDateTime(pointer);
                pointer.setDayOfMonthUTC(31);
				if (pointer > curr) {
                    pointer = new GlideDateTime(curr);
                }
                current_end = new GlideDateTime(pointer);
                validationLine.initialize();
                validationLine.setValue('period_start', current_start.getDate());
                validationLine.setValue('period_end', current_end.getDate());
                validationLine.setValue("billing_profile", current.u_billing_profile);
                validationLine.setValue("service", current.sys_id);
                validationLine.setValue("year", current_start.getYearUTC());
                validationLine.setValue("month", current_start.getMonthUTC());
                validationLine.setValue('otc', rev.otc);
                validationLine.setValue('mrc', rev.mrc);
				if (acd <= current_end && acd >= current_start) {
					validationLine.setValue('otc_calculated', rev.otc);
				} else {
					validationLine.setValue('otc_calculated', 0);
				}
                if (curr == current_end) {
                    validationLine.setValue('mrc_calculated', parseFloat(current.u_early_termination_fee) + utils.claculateMRC(rev.mrc, current_start, current_end));
                } else {
                    validationLine.setValue('mrc_calculated', utils.claculateMRC(rev.mrc, current_start, current_end));
                }
				validationLine.setValue('project', current.u_project);
				validationLine.setValue('project_code', current.u_project_code);
				validationLine.setValue('product_type', current.u_product_type);
                validationLine.insert();
				gs.info(current_start.getDate() + ' - ' + current_end.getDate());
				pointer.addDaysUTC(1);
            }

        }


    }






})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>samson.fulop</sys_created_by>
        <sys_created_on>2022-10-19 12:27:57</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>a885dd831be6551030bc986c9b4bcbfe</sys_id>
        <sys_mod_count>35</sys_mod_count>
        <sys_name>CMB Service Last billing date change</sys_name>
        <sys_overrides/>
        <sys_package display_value="CMB" source="x_tsigh_cmb">365c71ab1be95110c7c9fc078b4bcb2c</sys_package>
        <sys_policy/>
        <sys_scope display_value="CMB">365c71ab1be95110c7c9fc078b4bcb2c</sys_scope>
        <sys_update_name>sys_script_a885dd831be6551030bc986c9b4bcbfe</sys_update_name>
        <sys_updated_by>samson.fulop</sys_updated_by>
        <sys_updated_on>2022-11-07 09:34:22</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=a885dd831be6551030bc986c9b4bcbfe"/>
</record_update>
