<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_tsigh_cmb.BNRExchangeRate</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Exchange rate by BNR. </description>
        <name>BNRExchangeRate</name>
        <script><![CDATA[var BNRExchangeRate = Class.create();
BNRExchangeRate.prototype = {
    initialize: function() {
    },
	
	BNRExchange: function(){
		
		var r = new sn_ws.RESTMessageV2('Exchange Rate', 'Default GET');

		//override authentication profile 
		//authentication type ='basic'/ 'oauth2'
		//r.setAuthenticationProfile(authentication type, profile name);

		//set a MID server name if one wants to run the message on MID
		//r.setMIDServer('MY_MID_SERVER');

		//if the message is configured to communicate through ECC queue, either
		//by setting a MID server or calling executeAsync, one needs to set skip_sensor
		//to true. Otherwise, one may get an intermittent error that the response body is null
		//r.setEccParameter('skip_sensor', true);

		var response = r.execute();
		var responseBody = response.getBody();
		var httpStatus = response.getStatusCode();


		var resultsStr = global.JSON.stringify(gs.xmlToJSON(responseBody));


		var resultsJSon = global.JSON.parse(resultsStr);
		var gr = new GlideRecord('fx_rate');
		gr.query();

		var curr = new GlideRecord('fx_currency');
		curr.query();


	while (curr.next()){ 
		if(curr.code == 'RON'){
			gr.initialize();
			gr.currency = curr.sys_id;
			gr.rate = 1;
			gr.insert();
		}
	for (i = 0; i < resultsJSon.DataSet.Body.Cube.Rate.length; i ++){
		if (curr.code == resultsJSon.DataSet.Body.Cube.Rate[i].currency.toString())  {
			if(resultsJSon.DataSet.Body.Cube.Rate[i].multiplier){
				gr.initialize();
				gr.currency = curr.sys_id;
				gr.rate = 1/parseFloat(resultsJSon.DataSet.Body.Cube.Rate[i].content)/100;
				gr.insert();
			}
			else{
				gr.initialize();
				gr.currency = curr.sys_id;
				gr.rate = 1/parseFloat(resultsJSon.DataSet.Body.Cube.Rate[i].content);
				gr.insert();
			}
		}
	}
	}

	},
	
    type: 'BNRExchangeRate'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>szabo.zoltan</sys_created_by>
        <sys_created_on>2022-09-06 14:34:11</sys_created_on>
        <sys_id>3040dc191bb1d510c7c9fc078b4bcb69</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>BNRExchangeRate</sys_name>
        <sys_package display_value="CMB" source="x_tsigh_cmb">365c71ab1be95110c7c9fc078b4bcb2c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CMB">365c71ab1be95110c7c9fc078b4bcb2c</sys_scope>
        <sys_update_name>sys_script_include_3040dc191bb1d510c7c9fc078b4bcb69</sys_update_name>
        <sys_updated_by>szabo.zoltan</sys_updated_by>
        <sys_updated_on>2022-10-04 10:59:06</sys_updated_on>
    </sys_script_include>
</record_update>
