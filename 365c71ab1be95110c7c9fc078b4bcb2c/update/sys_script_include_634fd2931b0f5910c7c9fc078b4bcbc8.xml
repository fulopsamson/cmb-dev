<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_tsigh_cmb.XlsExport</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>XlsExport</name>
        <script><![CDATA[/**
 * __  ___     _____                       _
 * \ \/ / |___| ____|_  ___ __   ___  _ __| |_
 *  \  /| / __|  _| \ \/ / '_ \ / _ \| '__| __|
 *  /  \| \__ \ |___ >  <| |_) | (_) | |  | |_
 * /_/\_\_|___/_____/_/\_\ .__/ \___/|_|   \__|
 *                       |_|
 * 6/12/2017
 * Daniel Blanco Parla
 * https://github.com/deblanco/xlsExport
 */
var XlsExport = Class.create();
XlsExport.prototype = {
    initialize: function(data, title) {
   // input validation: new xlsExport([], String)
    if (!Array.isArray(data) || (typeof title !== 'string' || Object.prototype.toString.call(title) !== '[object String]')) {
      throw new Error('Invalid input types: new xlsExport(Array [], String)');
    }

    this._data = data;
    this._title = title;
  },

  setData:function(data) {
    if (!Array.isArray(data)) throw new Error('Invalid input type: setData(Array [])');

    this._data = data;
  },

  getData:function() {
    return this._data;
  },

  exportToXLS:function(fileName, rtl) {
    if (typeof fileName !== 'string' || Object.prototype.toString.call(fileName) !== '[object String]') {
      throw new Error('Invalid input type: exportToCSV(String)');
    }

    var TEMPLATE_XLS_val = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><meta http-equiv="content-type" content="application/vnd.ms-excel; charset=UTF-8"/><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{title}</x:Name><x:WorksheetOptions>';

    if (rtl)
        TEMPLATE_XLS_val = TEMPLATE_XLS_val + '<x:DisplayRightToLeft/>';

    TEMPLATE_XLS_val = TEMPLATE_XLS_val +
    '<x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body>{table}</body></html>';

    var TEMPLATE_XLS = TEMPLATE_XLS_val;
    
    var MIME_XLS = 'application/vnd.ms-excel;base64,';

    var parameters = {
      title: this._title,
      table: this.objectToTable(),
    };
 /*   var computeOutput = TEMPLATE_XLS.replace(/{(\w+)}/g, (x, y) => parameters[y]);

    var computedXLS = new Blob([computeOutput], {
      type: MIME_XLS,
    });
    var xlsLink = window.URL.createObjectURL(computedXLS);
    this.downloadFile(xlsLink, fileName);
  }

  exportToCSV(fileName = 'export.csv') {
    if (typeof fileName !== 'string' || Object.prototype.toString.call(fileName) !== '[object String]') {
      throw new Error('Invalid input type: exportToCSV(String)');
    }
    var computedCSV = new Blob([this.objectToSemicolons()], {
      type: 'text/csv;charset=utf-8',
    });
    var csvLink = window.URL.createObjectURL(computedCSV);
    this.downloadFile(csvLink, fileName);
  }

  downloadFile(output, fileName) {
    var link = document.createElement('a');
    document.body.appendChild(link);
    link.download = fileName;
    link.href = output;
    link.click();
  }

  toBase64:function(string) {
    return window.btoa(unescape(encodeURIComponent(string)));
  },

  objectToTable:function() {
    // extract keys from the first object, will be the title for each column
    var colsHead = `<tr>${Object.keys(this._data[0]).map(key => `<td>${key}</td>`).join('')}</tr>`;

    var colsData = this._data.map(obj => [`<tr>
                ${Object.keys(obj).map(col => `<td>${(obj[col] === 0 || obj[col]) ? obj[col] : ''}</td>`).join('')}
            </tr>`]) // 'null' values not showed but zero value is showed
      .join('');

    return `<table>${colsHead}${colsData}</table>`.trim(); // remove spaces...
  },

  objectToSemicolons:function() {
    var colsHead = Object.keys(this._data[0]).map(key => [key]).join(';');
    var colsData = this._data.map(obj => [ // obj === row
      Object.keys(obj).map(col => [
        obj[col], // row[column]
      ]).join(';'), // join the row with ';'
    ]).join('\n'); // end of row

    return `${colsHead}\n${colsData}`;*/
  },
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>toma.istvan</sys_created_by>
        <sys_created_on>2022-11-14 09:04:21</sys_created_on>
        <sys_id>634fd2931b0f5910c7c9fc078b4bcbc8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>XlsExport</sys_name>
        <sys_package display_value="CMB" source="x_tsigh_cmb">365c71ab1be95110c7c9fc078b4bcb2c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CMB">365c71ab1be95110c7c9fc078b4bcb2c</sys_scope>
        <sys_update_name>sys_script_include_634fd2931b0f5910c7c9fc078b4bcbc8</sys_update_name>
        <sys_updated_by>toma.istvan</sys_updated_by>
        <sys_updated_on>2022-11-14 09:04:21</sys_updated_on>
    </sys_script_include>
</record_update>
