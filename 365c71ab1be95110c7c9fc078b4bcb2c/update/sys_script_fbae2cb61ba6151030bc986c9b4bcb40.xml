<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>true</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_tsigh_cmb_u_cmdb_ci_cmb_service</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_tsigh_cmb_u_cmdb_ci_cmb_service">u_stateCHANGESTOActive^NQu_state=Active^u_acceptance_dateVALCHANGES^EQ<item display_value="Active" endquery="false" field="u_state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="Active"/>
            <item display_value="Active" endquery="false" field="u_state" goto="false" newquery="true" operator="=" or="false" value="Active"/>
            <item endquery="false" field="u_acceptance_date" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message><![CDATA[<p>Acceptance date script ran</p>]]></message>
        <name>CMB Service Acceptance date change</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous) {
	
	var below_limit = new GlideDateTime(gs.getProperty('x_tsigh_cmb.start_date'));
	
	gs.info('Current acc: ' + current.u_acceptance_date + ' Previous acc: ' + previous.u_acceptance_date + ' Current state: ' + current.u_state + ' Previous state: ' + previous.u_state);
    var curr = new GlideDateTime(current.u_acceptance_date);
    var prev = new GlideDateTime(previous.u_acceptance_date);
	if (curr == '') {
		gs.info('Service acceptance date is invalid');
        return;
	}
    if (prev == curr && current.u_state == previous.u_state) {
        return;
    }

    var dummy = new GlideDateTime();
    dummy.setDayOfMonthUTC(1);
    var now_start = new GlideDateTime(dummy.getDate());
    dummy.setDayOfMonthUTC(31);
    var now_end = new GlideDateTime(dummy.getDate());

    var utils = new x_tsigh_cmb.CMBServiceUtils();
    var validationLine = new GlideRecord('x_tsigh_cmb_validation_line');

    var current_end = new GlideDateTime();
    var current_start = new GlideDateTime();
    var pointer = new GlideDateTime();
	var rev = utils.getRevenueSum(current.sys_id);
    if (previous.u_state != 'Active') {
		gs.addInfoMessage('Service was activated with acceptance date: ' + current.u_acceptance_date);
        pointer = new GlideDateTime(curr);
		if (pointer < below_limit) {
			pointer  = new GlideDateTime(below_limit);
		}
        while (pointer < now_end) {
            current_start = new GlideDateTime(pointer);
            pointer.setDayOfMonthUTC(31);
            current_end = new GlideDateTime(pointer);
            validationLine.initialize();
            validationLine.setValue('period_start', current_start.getDate());
            validationLine.setValue('period_end', current_end.getDate());
            validationLine.setValue("billing_profile", current.u_billing_profile);
            validationLine.setValue("service", current.sys_id);
            validationLine.setValue("year", current_start.getYearUTC());
            validationLine.setValue("month", current_start.getMonthUTC());
            validationLine.setValue('otc', rev.otc);
            validationLine.setValue('mrc', rev.mrc);
			validationLine.setValue('project', current.u_project);
			validationLine.setValue('project_code', current.u_project_code);
			validationLine.setValue('product_type', current.u_product_type);
			
		
            if (curr <= current_end && curr >= current_start) {
                validationLine.setValue('otc_calculated', rev.otc);
            } else {
                validationLine.setValue('otc_calculated', 0);
            }
            validationLine.setValue('mrc_calculated', utils.claculateMRC(rev.mrc, current_start, current_end));
            validationLine.insert();
            pointer.addDaysUTC(1);
        }
    } else {
		gs.addInfoMessage('Service acceptance date was changed: ' + prev + ' -> ' + curr);
        if (curr < prev) {
			current_start = new GlideDateTime(prev);
            dummy = new GlideDateTime(prev);
            dummy.setDayOfMonthUTC(31);
            current_end = new GlideDateTime(dummy);
            validationLine.initialize();
            validationLine.setValue('period_start', current_start.getDate());
            validationLine.setValue('period_end', current_end.getDate());
            validationLine.setValue("billing_profile", current.u_billing_profile);
            validationLine.setValue("service", current.sys_id);
            validationLine.setValue("year", current_start.getYearUTC());
            validationLine.setValue("month", current_start.getMonthUTC());
			
            validationLine.setValue('otc', rev.otc);
            validationLine.setValue('mrc', rev.mrc);
            validationLine.setValue('otc_calculated', (-1) * rev.otc);
            validationLine.setValue('mrc_calculated', (-1) * utils.claculateMRC(rev.mrc, current_start, current_end));
			validationLine.setValue('project', current.u_project);
			validationLine.setValue('project_code', current.u_project_code);
			validationLine.setValue('product_type', current.u_product_type);
            validationLine.insert();
			
			
			pointer = new GlideDateTime(curr);
			while (pointer < prev) {
                current_start = new GlideDateTime(pointer);
                pointer.setDayOfMonthUTC(31);
                current_end = new GlideDateTime(pointer);

                validationLine.initialize();
                validationLine.setValue('period_start', current_start.getDate());
                validationLine.setValue('period_end', current_end.getDate());
                validationLine.setValue("billing_profile", current.u_billing_profile);
                validationLine.setValue("service", current.sys_id);
                validationLine.setValue("year", current_start.getYearUTC());
                validationLine.setValue("month", current_start.getMonthUTC());
                validationLine.setValue('otc', rev.otc);
                validationLine.setValue('mrc', rev.mrc);
				
				if (current_start <= curr && curr <= current_end) {
					validationLine.setValue('otc_calculated', rev.otc);
				} else {
					validationLine.setValue('otc_calculated', 0);
				}
				validationLine.setValue('project', current.u_project);
				validationLine.setValue('project_code', current.u_project_code);
				validationLine.setValue('product_type', current.u_product_type);
                validationLine.setValue('mrc_calculated', utils.claculateMRC(rev.mrc, current_start, current_end));
                validationLine.insert();
                pointer.addDaysUTC(1);
            }
        } else if (curr > prev) {
            pointer = new GlideDateTime(prev);

            while (pointer < curr) {
                current_start = new GlideDateTime(pointer);
                pointer.setDayOfMonthUTC(31);
                current_end = new GlideDateTime(pointer);
                validationLine.initialize();
                validationLine.setValue('period_start', current_start.getDate());
                validationLine.setValue('period_end', current_end.getDate());
                validationLine.setValue("billing_profile", current.u_billing_profile);
                validationLine.setValue("service", current.sys_id);
                validationLine.setValue("year", current_start.getYearUTC());
                validationLine.setValue("month", current_start.getMonthUTC());
                validationLine.setValue('otc', rev.otc);
                validationLine.setValue('mrc', rev.mrc);
				validationLine.setValue('project', current.u_project);
				validationLine.setValue('project_code', current.u_project_code);
				validationLine.setValue('product_type', current.u_product_type);
				if (current_start <= prev && prev <= current_end) {
					validationLine.setValue('otc_calculated', (-1) * rev.otc);
				} else {
					validationLine.setValue('otc_calculated', 0);
				}
                validationLine.setValue('mrc_calculated', (-1) * utils.claculateMRC(rev.mrc, current_start, current_end));
                validationLine.insert();
                pointer.addDaysUTC(1);
            }

            current_start = new GlideDateTime(curr);
            dummy = new GlideDateTime(curr);
            dummy.setDayOfMonthUTC(31);
            current_end = new GlideDateTime(dummy);
            validationLine.initialize();
            validationLine.setValue('period_start', current_start.getDate());
            validationLine.setValue('period_end', current_end.getDate());
            validationLine.setValue("billing_profile", current.u_billing_profile);
            validationLine.setValue("service", current.sys_id);
            validationLine.setValue("year", current_start.getYearUTC());
            validationLine.setValue("month", current_start.getMonthUTC());
            validationLine.setValue('otc', rev.otc);
            validationLine.setValue('mrc', rev.mrc);
            validationLine.setValue('otc_calculated', rev.otc);
            validationLine.setValue('mrc_calculated', utils.claculateMRC(rev.mrc, current_start, current_end));
			validationLine.setValue('project', current.u_project);
			validationLine.setValue('project_code', current.u_project_code);
			validationLine.setValue('product_type', current.u_product_type);
            validationLine.insert();			
        }

    }

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>samson.fulop</sys_created_by>
        <sys_created_on>2022-10-18 14:59:00</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>fbae2cb61ba6151030bc986c9b4bcb40</sys_id>
        <sys_mod_count>50</sys_mod_count>
        <sys_name>CMB Service Acceptance date change</sys_name>
        <sys_overrides/>
        <sys_package display_value="CMB" source="x_tsigh_cmb">365c71ab1be95110c7c9fc078b4bcb2c</sys_package>
        <sys_policy/>
        <sys_scope display_value="CMB">365c71ab1be95110c7c9fc078b4bcb2c</sys_scope>
        <sys_update_name>sys_script_fbae2cb61ba6151030bc986c9b4bcb40</sys_update_name>
        <sys_updated_by>samson.fulop</sys_updated_by>
        <sys_updated_on>2022-11-29 15:28:15</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=fbae2cb61ba6151030bc986c9b4bcb40"/>
</record_update>
